# SOLID Design principles - A set of deign principles for software design / architecture
    * Creational
    * Structural
    * Behavioral

# Creational Pattern
    * Builder
    * Factories
        -> Abstract Factory
        -> Factory Method
    * Prototype
    * Singleton

# Structural Pattern
    * Adapter
    * Bridge
    * Composite
    * Facade
    * FlyWeight
    * Proxy

# Behavioral Pattern
    * Chain of Responsibility
    * Command
    * Interpreter
    * Iterator
    * Mediator
    * Memento
    * Observer
    * State
    * Strategy
    * Template Method
    * Visitor

# Single Responsibility principle -> It states that a class should have only one reason to change. A single class should have only one responsibility. If a class take on a lot of responsibility, you end up with a God object which is an anti-pattern. 

# Open Close Principle + Specification deign pattern -> The whole principle for this design it to be open for extension but close for modification.

# Liskov Substitution Principle (LSP) -> The idea of this principle is you should be able to substitute a sub class for a base class without breaking